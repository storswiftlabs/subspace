searchState.loadedDescShard("domain_block_builder", 0, "Substrate block builder\nUtility for building new (valid) blocks from a stream of …\nThe <code>BlockBuilder</code> api trait that provides the required …\nBlock builder provider\nA block that was build by <code>BlockBuilder</code> plus some …\n<code>No</code>, don’t record any proof.\nUsed as parameter to <code>BlockBuilderProvider</code> to express if …\n<code>Yes</code>, record a proof.\nApply the given extrinsic.\nThe actual block that was build.\nConsume the builder to build a valid <code>Block</code> containing all …\nCheck that the inherents are valid. The inherent data will …\nCreate the inherents for the block.\nEstimate the size of the block in the current state.\nFinish the current block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate inherent extrinsics. The inherent data will vary …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into the inner values.\nCreate a new instance of builder based on the given …\nCreate a new block, built on the head of the chain.\nCreate a new block, built on top of <code>parent</code>.\nReturns the state before executing the extrinsic at given …\nReturns the state before finalizing the block.\nAn optional proof that was recorded while building the …\nThe changes that need to be applied to the backend to get …\nReturns if <code>Self</code> == <code>Yes</code>.")